#include <string>
#include <iostream>

#include <tally/env.h>

#define REGISTER_UINT32_ENV_VAR(NAME, DEFAULT_VAL) \
    NAME = std::getenv(#NAME) ? std::stoi(std::getenv(#NAME)) : DEFAULT_VAL;

#define REGISTER_BOOL_ENV_VAR(NAME, DEFAULT_VAL) \
    NAME = std::getenv(#NAME) ? (std::string(std::getenv(#NAME)) == "TRUE") : DEFAULT_VAL;

bool TALLY_INITIALIZED = false;

uint32_t THREADS_PER_SLICE;
bool USE_CUDA_GRAPH;
uint32_t USE_TRANSFORM_THRESHOLD;
uint32_t TRANSFORM_THREADS_THRESHOLD;

bool PROFILE_KERNEL_TO_KERNEL_PERF;
uint32_t PROFILE_KERNEL_IDX;
uint32_t PROFILE_DURATION_SECONDS;
bool PROFILE_WARMED_UP; // Set this to true when warmed up

bool PROFILE_USE_ORIGINAL;
bool PROFILE_USE_SLICED;
bool PROFILE_USE_PTB;
bool PROFILE_USE_CUDA_GRAPH;
uint32_t PROFILE_THREADS_PER_SLICE;
uint32_t PROFILE_NUM_BLOCKS_PER_SM;

void __attribute__((constructor)) register_env_vars()
{
    std::cout << "register_env_vars" << std::endl;

    REGISTER_UINT32_ENV_VAR(TRANSFORM_THREADS_THRESHOLD, 129560);
    REGISTER_UINT32_ENV_VAR(THREADS_PER_SLICE, 196608);
    REGISTER_BOOL_ENV_VAR(USE_CUDA_GRAPH, false);
    REGISTER_UINT32_ENV_VAR(USE_TRANSFORM_THRESHOLD, 2);

    // For kernel-to-kernel profiling purposes
    REGISTER_BOOL_ENV_VAR(PROFILE_KERNEL_TO_KERNEL_PERF, false);
    REGISTER_UINT32_ENV_VAR(PROFILE_KERNEL_IDX, 0);
    REGISTER_UINT32_ENV_VAR(PROFILE_DURATION_SECONDS, 10);
    REGISTER_BOOL_ENV_VAR(PROFILE_WARMED_UP, false);

    REGISTER_BOOL_ENV_VAR(PROFILE_USE_ORIGINAL, true);
    REGISTER_BOOL_ENV_VAR(PROFILE_USE_SLICED, false);
    REGISTER_BOOL_ENV_VAR(PROFILE_USE_PTB, false);
    REGISTER_BOOL_ENV_VAR(PROFILE_USE_CUDA_GRAPH, false);
    REGISTER_UINT32_ENV_VAR(PROFILE_THREADS_PER_SLICE, 0);
    REGISTER_UINT32_ENV_VAR(PROFILE_NUM_BLOCKS_PER_SM, 0);

    TALLY_INITIALIZED = true;
}